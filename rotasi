bot = getBot()
worlds = {}
fossil = {}
tileBreak = {}
tree = {}
treeun = {}
profit = 0
t = os.time()
countSeed = 0
blacklistTile = false
rangeFarming = false

worldList = Bot[bot:getLocal().name:upper()].farmList
start = Bot[bot:getLocal().name:upper()].startFrom
if Bot[bot:getLocal().name:upper()].stopAt > 0 then
    stop = Bot[bot:getLocal().name:upper()].stopAt
else
    stop = #Bot[bot:getLocal().name:upper()].farmList
end
doorFarm = Bot[bot:getLocal().name:upper()].doorFarm

tileNumber = Bot[bot:getLocal().name:upper()].tileNumber
customPNB = Bot[bot:getLocal().name:upper()].customPNB
customX = Bot[bot:getLocal().name:upper()].customX
customY = Bot[bot:getLocal().name:upper()].customY

autoPickaxe = Bot[bot:getLocal().name:upper()].autoPickaxe
pickStorage = Bot[bot:getLocal().name:upper()].pickStorage
doorPick = Bot[bot:getLocal().name:upper()].doorPick

messageId = Bot[bot:getLocal().name:upper()].messageId

for i = start,stop do
    table.insert(worlds,worldList[i])
end

if Bot[bot:getLocal().name:upper()].stopAt > 0 and looping then
    looping = false
    rangeFarming = true
end

if looping then
    for i = 0,start - 1 do
        table.insert(worlds,worldList[i])
    end
end

for _,pack in pairs(packList) do
    table.insert(goods,pack)
end

for i = math.floor(tileNumber/2),1,-1 do
    i = i * -1
    table.insert(tileBreak,i)
end
for i = 0, math.ceil(tileNumber/2) - 1 do
    table.insert(tileBreak,i)
end

function bl(world)
    blist = {}
    fossil[world:upper()] = 0
    for _,tile in ipairs(bot:getTiles()) do
        if tile.fg == 6 then
            doorX = tile.x
            doorY = tile.y
        elseif tile.fg == 3918 then
            fossil[world:upper()] = fossil[world:upper()] + 1
        end
    end
    if blacklistTile then
        for _,tile in pairs(blacklist) do
            table.insert(blist,{x = doorX + tile.x, y = doorY + tile.y})
        end
    end
end

function tilePunch(x,y)
    for _,num in pairs(tileBreak) do
        if bot:getTile(x - 1,y + num).fg ~= 0 or bot:getTile(x - 1,y + num).bg ~= 0 then
            return true
        end
    end
    return false
end

function tilePlace(x,y)
    for _,num in pairs(tileBreak) do
        if bot:getTile(x - 1,y + num).fg == 0 and bot:getTile(x - 1,y + num).bg == 0 then
            return true
        end
    end
    return false
end

function warp(world,id)
    while bot:getWorld().name:upper() ~= world:upper() do
        bot:sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0", 3)
        sleep(delayJoinWorld)
        reconnect(world, id)
    end
    if id ~= "" and id ~= nil then
        while bot:getTile(math.floor(bot:getLocal().pos.x / 32), math.floor(bot:getLocal().pos.y / 32)).fg == 6 do
            bot:sendPacket("action|join_request\nname|"..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
            sleep(delayJoinWorld)
            reconnect(world, id)
        end
    end
end

function countWorld(world)
    tree[world:upper()] = 0
    treeun[world:upper()] = 0
    if bot:inWorld() then
        for _,tile in ipairs(bot:getTiles()) do
            if tile.fg == seedId and bot:hasAccessToTile(tile.x,tile.y) then
                if bot:canHarvest(tile.x,tile.y) then
                    tree[world:upper()] = tree[world:upper()] + 1
                else
                    treeun[world:upper()] = treeun[world:upper()] + 1
                end
            end
        end
    end
end

function botInfo(info)
    te = os.time() - t
    fossill = (fossil[bot:getWorld().name:upper()] or 0)
    local text = [[
    {
        "content": null,
        "embeds": [
        {
            "title": "Rotation Script By Omniscius",
            "color": 16377020,
            "fields": [
            {
                "name": "TASK INFORMATION",
                "value": "<:dubstep:1256121477242290247> | Current Task : ]]..info..[[\n<:crystalclock:1256120386081390604> | Uptime : ]]..math.floor(te/86400)..[[ Days ]]..math.floor(te%86400/3600)..[[ Hours ]]..math.floor(te%86400%3600/60)..[[ Minutes"
            },
            {
                "name": "BOT INFORMATION",
                "value": "<:7577nametag:1256116827269103716> | Bot Name : ||]]..bot:getLocal().name:upper()..[[||\n<:experience:1256141908070371429> | Bot Level : ]]..bot:getLocal().level..[[\n<:traine:1256142604266115092> | Bot Status : ]]..statusBot()..[[ (]]..bot:getMs()..[[)\n<:gems:1256142860265459786> | Bot Gems : ]]..bot:getLocal().gems..[["
            },
            {
                "name": "WORLD INFORMATION",
                "value": "<:checkmark:1256141379185278988> | World Order : ]]..start..[[ / ]]..stop..[[\n<:globe:1256140993888256091> | Current World : ||]]..bot:getWorld().name:upper()..[[||\n<:fossil:1256139849707294760> | Fossil : ]]..fossill..[[\n<:ready:1256139261367947294> | Tree Ready : ]]..(tree[bot:getWorld().name:upper()] or "?")..[[\n<:unready:1256138410389671966> | Tree Unready : ]]..(treeun[bot:getWorld().name:upper()] or "?")..[["
            },
            {
                "name": "STORAGE INFORMATION",
                "value": "<:vault:1256130550230548631> | Profit Pack : ]]..profit..[[ ]]..packName..[[\n]]..itemInfo()..[[ | Total Seed : ]]..countSeed..[["
            },
            {
                "name": "ABOUT SCRIPT",
                "value": "<:41564crownorange:1256129724980265031>| Script Owner : <@]]..discordUserId..[[>\n<:disc:1256128692975960137> | Discord Server : https://discord.gg/XGzEaRVHTk"
            }
            ],
            "footer": {
            "text": "]]..(os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60))..[["
            }
        }
        ],
        "username": "Omniscius Script",
        "attachments": []
    }]]

    if webhookEdited then
        local requestInfo = {
            url = webhookMain.."/messages/"..messageId,
            method = PATCH,
            json = true,
            postData = text
        }
        httpReq(requestInfo)
    else
        local requestInfo = {
            url = webhookMain,
            method = POST,
            json = true,
            postData = text
        }
        httpReq(requestInfo)
    end
end

function reconInfo()
    local text = [[
        {
        "content": "||]]..bot:getLocal().name..[[|| status is ]]..statusBot()..[[ @everyone",
        "embeds": null,
        "username": "Omniscius Script",
        "attachments": []
    }
    ]]

    local requestInfo = {
        url = webhookStatus,
        method = POST,
        json = true,
        postData = text
    }
    httpReq(requestInfo)
end

function statusBot()
    bot = getBot()
    if bot:getEnetStatus() == Connected and bot:getBotStatus() == Success then
        Status = "online"
    elseif bot:getBotStatus() == Suspended then
        Status = "suspended"
    elseif bot:getBotStatus() == Banned then
        Status = "banned"
    elseif bot:getBotStatus() == Wrong_Password then
        Status = "wrong"
    elseif bot:getBotStatus() == Update_Required then
        Status = "update version"
    elseif bot:getBotStatus() == Maintenance then
        Status = "maintenance"
    elseif bot:getBotStatus() == AAP then
        Status = "AAP"
    elseif bot:getBotStatus() == Unable_to_create_new_account then
        Status = "guestError"
    else
        Status = "offline"
    end
    return Status
end

function reconnect(world,id,x,y)
    if statusBot() ~= "online" then
        botInfo("Reconnecting")
        sleep(100)
        reconInfo()
        sleep(100)
        konek = 0
        while true do
            bot:reConnect()
            bot:setBool("autoReconnect", false)
            sleep(15000)
            if statusBot() == "suspended" or statusBot() == "banned" then
                botInfo(statusBot())
                sleep(100)
                reconInfo()
                sleep(100)
                while true do
                    sleep(10000)
                end
            elseif statusBot() == "maintenance" then
                botInfo(statusBot())
                sleep(60000)
            end
            while statusBot() == "online" and bot:getWorld().name:upper() ~= world:upper() do
                bot:sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
                sleep(delayJoinWorld)
            end
            if statusBot() == "online" and bot:getWorld().name:upper() == world:upper() then
                if id then
                    while bot:getTile(math.floor(bot:getLocal().pos.x/32), math.floor(bot:getLocal().pos.y/32)).fg == 6 do
                        bot:sendPacket("action|join_request\nname|"..world:upper().."|"..id:upper().."\ninvitedWorld|0",3)
                        sleep(delayJoinWorld)
                    end
                end
                if x and y and statusBot() == "online" and bot:getWorld().name:upper() == world:upper() then
                    while math.floor(bot:getLocal().pos.x/32) ~= x or math.floor(bot:getLocal().pos.y/32) ~= y do
                        if not bot:isInside(x,y,0) and #bot:getPath(x,y) > 0 then
                            bot:findPath(x,y)
                            sleep(200)
                        end
                    end
                end
                if statusBot() == "online" and bot:getWorld().name:upper() == world:upper() then
                    if x and y then
                        if statusBot() == "online" and math.floor(bot:getLocal().pos.x/32) == x and math.floor(bot:getLocal().pos.y/32) == y then
                            break
                        end
                    elseif statusBot() == "online" then
                        break
                    end
                end
            end
            if konek < 20 then
                konek = konek + 1
            else
                local minutes = math.floor(600000 / 60000)
                botInfo("Max Reconnect Attempt Reached! Waiting for "..minutes.." Minutes")
                sleep(600000)
                konek = 0
                botInfo("Reconnecting")
                sleep(100)
            end
        end
        botInfo("Succesfully Reconnected")
        sleep(100)
        reconInfo()
        sleep(100)
        botInfo("Farming")
        sleep(100)
    end
end

function findItem(id)
    return bot:getItemCount(id)
end

function round(n)
    return n % 1 > 0.5 and math.ceil(n) or math.floor(n)
end

function tileDrop1(x,y,num)
    local count = 0
    local stack = 0
    for _,obj in pairs(bot:getObjects()) do
        if round(obj.pos.x / 32) == x and math.floor(obj.pos.y / 32) == y then
            count = count + obj.count
            stack = stack + 1
        end
    end
    if stack < 20 and count <= (4000 - num) then
        return true
    end
    return false
end

function tileDrop2(x,y,num)
    local count = 0
    local stack = 0
    for _,obj in pairs(bot:getObjects()) do
        if round(obj.pos.x / 32) == x and math.floor(obj.pos.y / 32) == y then
            count = count + obj.count
            stack = stack + 1
        end
    end
    if count <= (4000 - num) then
        return true
    end
    return false
end

function storePack()
    for _,pack in pairs(packList) do
        for _,tile in ipairs(bot:getTiles()) do
            if tile.fg == patokanPack or tile.bg == patokanPack then
                if tileDrop1(tile.x,tile.y,findItem(pack)) then
                    while math.floor(bot:getLocal().pos.x / 32) ~= (tile.x + 1) or math.floor(bot:getLocal().pos.y / 32) ~= tile.y do
                        bot:findPath(tile.x + 1,tile.y)
                        sleep(1000)
                        reconnect(packStorage,doorPack,tile.x + 1,tile.y)
                    end
                    faceSide("left")
                    sleep(500)
                    while findItem(pack) > 0 and tileDrop1(tile.x,tile.y,findItem(pack)) do
                        bot:sendPacket("action|drop\n|itemID|"..pack, 2)
                        sleep(1250)
                        bot:sendPacket("action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..findItem(pack), 2)
                        sleep(1250)
                        reconnect(packStorage,doorPack,tile.x - 1,tile.y)
                    end
                end
            end
            if findItem(pack) == 0 then
                break
            end
        end
    end
end

function itemInfo()
    if seedId == 4585 then
        emote = "<:peppers:1256136913111355453>"
    elseif seedId == 5667 then
        emote = "<:lgrids:1256166474876452904>"
    elseif seedId == 341 then
        emote = "<:chands:1256166731064279041>"
    elseif seedId == 8641 then
        emote = "<:fences:1256167128315334658>"
    elseif seedId == 3005 then
        emote = "<:ftanks:1256167506880757790>"
    else
        emote = "<:idk:1256167753438462076>"
    end

    return emote
end

function infoPack()
    local store = {}
    for _,obj in pairs(bot:getObjects()) do
        if obj.id == seedId then
            if store[obj.id] then
                store[obj.id].count = store[obj.id].count + obj.count
            else
                store[obj.id] = {id = obj.id, count = obj.count}
            end
        end
    end
    countSeed = store[seedId].count
end

function faceSide(direction)
    local packet = {}
    packet.type = 0
    if direction == "left" then
        packet.flags = 48
    elseif direction == "right" then
        packet.flags = 32
    end
    packet.pos_x = bot:getLocal().pos.x
    packet.pos_y = bot:getLocal().pos.y
    bot:sendPacketRaw(packet)
end

function storeSeed(world)
    botInfo("Storing Seed")
    sleep(100)
    bot:autoCollect(3, false)
    sleep(100)
    warp(seedStorage,doorSeed)
    sleep(100)
    for _,tile in ipairs(bot:getTiles()) do
        if tile.fg == patokanSeed or tile.bg == patokanSeed then
            if tileDrop2(tile.x,tile.y,100) then
                while math.floor(bot:getLocal().pos.x / 32) ~= (tile.x + 1) or math.floor(bot:getLocal().pos.y / 32) ~= tile.y do
                    bot:findPath(tile.x + 1,tile.y)
                    sleep(1000)
                    reconnect(seedStorage,doorSeed,tile.x + 1,tile.y)
                end
                faceSide("left")
                sleep(500)
                while findItem(seedId) >= 100 and tileDrop2(tile.x,tile.y,100) do
                    bot:sendPacket("action|drop\n|itemID|"..seedId, 2)
                    sleep(1250)
                    bot:sendPacket("action|dialog_return\ndialog_name|drop_item\nitemID|"..seedId.."|\ncount|100", 2)
                    sleep(1250)
                    reconnect(seedStorage,doorSeed,tile.x + 1,tile.y)
                end
            end
            if findItem(seedId) < 100 then
                break
            end
        end
    end
    infoPack()
    sleep(100)
    warp(world,doorFarm)
    sleep(100)
    bot:autoCollect(3, true)
    sleep(100)
    botInfo("Farming")
    sleep(100)
end

function buy()
    botInfo("Buying and Storing Pack")
    sleep(100)
    bot:autoCollect(3, false)
    sleep(100)
    warp(packStorage,doorPack)
    sleep(100)
    while bot:getLocal().gems >= packPrice do
        for i = 1, packLimit do
            bot:sendPacket("action|buy\nitem|"..debugPack, 2)
            sleep(2000)
            if findItem(packList[1]) == 0 then
                bot:sendPacket("action|buy\nitem|upgrade_backpack", 2)
                sleep(2000)
            else
                profit = profit + 1
            end
            if bot:getLocal().gems < packPrice then
                break
            end
        end
        storePack()
        sleep(100)
        reconnect(packStorage,doorPack)
    end
    botInfo("Farming")
    sleep(100)
end

function includesNumber(table, number)
    for _,num in pairs(table) do
        if num == number then
            return true
        end
    end
    return false
end

function clear()
    for _,item in pairs(bot:getInventory()) do
        if not includesNumber(goods, item.id) then
            bot:sendPacket("action|trash\n|itemID|"..item.id, 2)
            sleep(500)
            bot:sendPacket("action|dialog_return\ndialog_name|trash_item\nitemID|"..item.id.."|\ncount|"..item.count, 2)
            sleep(1250)
        end
    end
end

function collect(range,id)
    for i,obj in pairs(bot:getObjects()) do
        if id ~= "" and id ~= nil then
            if obj.id == id then
                local ex = round(obj.pos.x/32)
                local ye = math.floor(obj.pos.y/32)
                if bot:isInside(ex, ye, range) then
                    bot:collectObject(obj.uid)
                end
            end
        else
            local ex = round(obj.pos.x/32)
            local ye = math.floor(obj.pos.y/32)
            if bot:isInside(ex, ye, range) then
                bot:collectObject(obj.uid)
            end
        end
    end
end

function take(world)
    botInfo("Taking Seed")
    sleep(100)
    while findItem(seedId) == 0 do
        bot:autoCollect(3, false)
        sleep(100)
        warp(seedStorage,doorSeed)
        sleep(100)
        for _,obj in pairs(bot:getObjects()) do
            if obj.id == seedId then
                bot:findPath(round(obj.pos.x / 32),math.floor(obj.pos.y / 32))
                sleep(1000)
                collect(2, seedId)
                sleep(1000)
            end
            if findItem(seedId) > 0 then
                break
            end
        end
        warp(world,doorFarm)
        sleep(100)
        bot:autoCollect(3, true)
        sleep(100)
    end
end

function place(item,x,y)
    return bot:placeTile(math.floor(bot:getLocal().pos.x/32)+x, math.floor(bot:getLocal().pos.y/32)+y, item)
end

function punch(x,y)
    return bot:hitTile(math.floor(bot:getLocal().pos.x/32)+x, math.floor(bot:getLocal().pos.y/32)+y)
end

function checkSeed(world)
    if findItem(seedId) == 0 then
        take(world)
        sleep(100)
        botInfo("Planting Seeds")
        sleep(100)
    end
end

function plant(world)
    botInfo("Planting Seeds")
    sleep(100)
    countWorld(world)
    sleep(100)
    for _,tile in ipairs(bot:getTiles()) do
        if findItem(seedId) == 0 then
            break
        end
        if bot:getTile(tile.x,tile.y).fg == 0 and tile.y ~= 0 and bot:getTile(tile.x,tile.y + 1).fg ~= 0 and not bot:isSeed(tile.x,tile.y+1) and bot:hasAccessToTile(tile.x,tile.y) and tile.x ~= 0 and tile.x ~= 99 then
            bot:findPath(tile.x,tile.y)
            sleep(50)
            while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and bot:getTile(tile.x,tile.y+1).fg ~= 0  do
                place(seedId,0,0)
                sleep(delayPlant)
                reconnect(world,doorFarm,tile.x,tile.y)
            end
        elseif tile.y == 53 then
            if tile.x == 0 and tile.y == 53 and tile.fg == 0 and bot:hasAccessToTile(tile.x,tile.y) then
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            elseif bot:getTile(tile.x, tile.y-1).fg ~= 0 and bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and tile.x ~= 0 and tile.x ~= 99 then
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and bot:getTile(tile.x,tile.y-1).fg ~= 0  do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y + 1)
                end
            elseif tile.x == 99 and tile.y == 53 and tile.fg == 0 and bot:hasAccessToTile(tile.x,tile.y) then
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            end
        end
    end
    countWorld(world)
    sleep(100)
    if findItem(seedId) >= 100 then
        storeSeed(world)
        sleep(100)
    end
end

function plant2(world)
    botInfo("Planting Seeds")
    sleep(100)
    countWorld(world)
    sleep(100)
    for _,tile in ipairs(bot:getTiles()) do
        if bot:getTile(tile.x,tile.y).fg == 0 and tile.y ~= 0 and bot:getTile(tile.x,tile.y + 1).fg ~= 0 and not bot:isSeed(tile.x,tile.y+1) and bot:hasAccessToTile(tile.x,tile.y) and tile.x ~= 0 and tile.x ~= 99 then
            checkSeed(world)
            bot:findPath(tile.x,tile.y)
            sleep(50)
            while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and bot:getTile(tile.x,tile.y+1).fg ~= 0  do
                place(seedId,0,0)
                sleep(delayPlant)
                reconnect(world,doorFarm,tile.x,tile.y)
            end
        elseif tile.y == 53 then
            if tile.x == 0 and tile.y == 53 and tile.fg == 0 and bot:hasAccessToTile(tile.x,tile.y) then
                checkSeed(world)
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            elseif bot:getTile(tile.x, tile.y-1).fg ~= 0 and bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and tile.x ~= 0 and tile.x ~= 99 then
                checkSeed(world)
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and bot:getTile(tile.x,tile.y-1).fg ~= 0  do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y + 1)
                end
            elseif tile.x == 99 and tile.y == 53 and tile.fg == 0 and bot:hasAccessToTile(tile.x,tile.y) then
                checkSeed(world)
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            end
        end
    end
    countWorld(world)
    sleep(100)
    if findItem(seedId) >= 100 then
        storeSeed(world)
        sleep(100)
    end
end

function plant3(world)
    botInfo("Planting Seeds")
    sleep(100)
    countWorld(world)
    sleep(100)
    for _,tile in ipairs(bot:getTiles()) do
        if findItem(seedId) == 0 then
            countWorld(world)
            sleep(100)
            if scanBlock() > 0 then
                pnb2(world)
                sleep(100)
            else
                take(world)
                sleep(100)
                botInfo("Planting Seeds")
                sleep(100)
            end
        end
        if bot:getTile(tile.x,tile.y).fg == 0 and tile.y ~= 0 and bot:getTile(tile.x,tile.y + 1).fg ~= 0 and not bot:isSeed(tile.x,tile.y+1) and bot:hasAccessToTile(tile.x,tile.y) and tile.x ~= 0 and tile.x ~= 99 then
            bot:findPath(tile.x,tile.y)
            sleep(50)
            while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and bot:getTile(tile.x,tile.y+1).fg ~= 0  do
                place(seedId,0,0)
                sleep(delayPlant)
                reconnect(world,doorFarm,tile.x,tile.y)
            end
        elseif tile.y == 53 then
            if tile.x == 0 and tile.y == 53 and tile.fg == 0 and bot:hasAccessToTile(tile.x,tile.y) then
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            elseif bot:getTile(tile.x, tile.y-1).fg ~= 0 and bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and tile.x ~= 0 and tile.x ~= 99 then
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) and bot:getTile(tile.x,tile.y-1).fg ~= 0  do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y + 1)
                end
            elseif tile.x == 99 and tile.y == 53 and tile.fg == 0 and bot:hasAccessToTile(tile.x,tile.y) then
                bot:findPath(tile.x,tile.y)
                sleep(50)
                while bot:getTile(tile.x,tile.y).fg == 0 and bot:hasAccessToTile(tile.x,tile.y) do
                    place(seedId,0,0)
                    sleep(delayPlant)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            end
        end
    end
    countWorld(world)
    sleep(100)
    if findItem(seedId) >= 100 then
        storeSeed(world)
        sleep(100)
    end
end

function pnb(world)
    if findItem(blockId) >= tileNumber then
        botInfo("Breaking Blocks")
        if not customPNB then
            ex = 1
            ye = math.floor(bot:getLocal().pos.y / 32)
            if ye > 40 then
                ye = ye - 10
            elseif ye < 11 then
                ye = ye + 10
            end
            if bot:getTile(ex,ye).fg ~= 0 and bot:getTile(ex,ye).fg ~= seedId then
                ye = ye - 1
            end
        else
            ex = customX
            ye = customY
        end
        while math.floor(bot:getLocal().pos.x / 32) ~= ex or math.floor(bot:getLocal().pos.y / 32) ~= ye do
            bot:findPath(ex,ye)
            sleep(1500)
        end
        if tileNumber > 1 then
            while findItem(blockId) >= tileNumber and findItem(seedId) < 190 do
                while tilePlace(ex,ye) do
                    for _,i in pairs(tileBreak) do
                        if bot:getTile(ex - 1,ye + i).fg == 0 and bot:getTile(ex - 1,ye + i).bg == 0 then
                            place(blockId,-1,i)
                            sleep(delayPlace)
                            reconnect(world,doorFarm,ex,ye)
                        end
                    end
                end
                while tilePunch(ex,ye) do
                    for _,i in pairs(tileBreak) do
                        if bot:getTile(ex - 1,ye + i).fg ~= 0 or bot:getTile(ex - 1,ye + i).bg ~= 0 then
                            punch(-1,i)
                            sleep(delayPunch)
                            reconnect(world,doorFarm,ex,ye)
                        end
                    end
                end
                reconnect(world,doorFarm,ex,ye)
            end
        else
            while findItem(blockId) > 0 and findItem(seedId) < 190 do
                while bot:getTile(ex - 1,ye).fg == 0 and bot:getTile(ex - 1,ye).bg == 0 do
                    place(blockId,-1,0)
                    sleep(delayPlace)
                    reconnect(world,doorFarm,ex,ye)
                end
                while bot:getTile(ex - 1,ye).fg ~= 0 or bot:getTile(ex - 1,ye).bg ~= 0 do
                    punch(-1,0)
                    sleep(delayPunch)
                    reconnect(world,doorFarm,ex,ye)
                end
            end
        end
        clear()
        sleep(100)
        if bot:getLocal().gems >= minimumGem then
            buy()
            sleep(100)
            warp(world,doorFarm)
            sleep(100)
            bot:autoCollect(3, true)
            sleep(100)
            botInfo("Farming")
            sleep(100)
        end
    end
end

function scanBlock()
    local store = {}
    for _,obj in pairs(bot:getObjects()) do       
        if obj.id == blockId then
            if store[obj.id] then
                store[obj.id].count = store[obj.id].count + obj.count
            else
                store[obj.id] = {id = obj.id, count = obj.count}
            end
        end
    end
    if store[blockId] then
        return store[blockId].count
    else
        return 0
    end
end

function takeBlock(world)
    for _,obj in pairs(bot:getObjects()) do
        if obj.id == blockId and #bot:getPath(round(obj.pos.x/32), math.floor(obj.pos.y/32)) > 0 then
            bot:findPath(round(obj.pos.x / 32),math.floor(obj.pos.y / 32))
            sleep(500)
            collect(2)
            sleep(1000)
            reconnect(world, doorFarm, round(obj.pos.x / 32),math.floor(obj.pos.y / 32))
        end
        if findItem(blockId) >= 190 then
            break
        end
    end
end

function pnb2(world)
    if findItem(blockId) < tileNumber then
        takeBlock(world)
        sleep(100)
    end
    if findItem(blockId) >= tileNumber then
        botInfo("Breaking Blocks")
        sleep(100)
        if not customPNB then
            ex = 1
            ye = math.floor(bot:getLocal().pos.y / 32)
            if ye > 40 then
                ye = ye - 10
            elseif ye < 11 then
                ye = ye + 10
            end
            if bot:getTile(ex,ye).fg ~= 0 and bot:getTile(ex,ye).fg ~= seedId then
                ye = ye - 1
            end
        else
            ex = customX
            ye = customY
        end
        while math.floor(bot:getLocal().pos.x / 32) ~= ex or math.floor(bot:getLocal().pos.y / 32) ~= ye do
            bot:findPath(ex,ye)
            sleep(1500)
        end
        if tileNumber > 1 then
            while findItem(blockId) >= tileNumber and findItem(seedId) < 190 do
                while tilePlace(ex,ye) do
                    for _,i in pairs(tileBreak) do
                        if bot:getTile(ex - 1,ye + i).fg == 0 and bot:getTile(ex - 1,ye + i).bg == 0 then
                            place(blockId,-1,i)
                            sleep(delayPlace)
                            reconnect(world,doorFarm,ex,ye)
                        end
                    end
                end
                while tilePunch(ex,ye) do
                    for _,i in pairs(tileBreak) do
                        if bot:getTile(ex - 1,ye + i).fg ~= 0 or bot:getTile(ex - 1,ye + i).bg ~= 0 then
                            punch(-1,i)
                            sleep(delayPunch)
                            reconnect(world,doorFarm,ex,ye)
                        end
                    end
                end
                reconnect(world,doorFarm,ex,ye)
            end
        else
            while findItem(blockId) > 0 and findItem(seedId) < 190 do
                while bot:getTile(ex - 1,ye).fg == 0 and bot:getTile(ex - 1,ye).bg == 0 do
                    place(blockId,-1,0)
                    sleep(delayPlace)
                    reconnect(world,doorFarm,ex,ye)
                end
                while bot:getTile(ex - 1,ye).fg ~= 0 or bot:getTile(ex - 1,ye).bg ~= 0 do
                    punch(-1,0)
                    sleep(delayPunch)
                    reconnect(world,doorFarm,ex,ye)
                end
            end
        end
        clear()
        sleep(100)
        if bot:getLocal().gems >= minimumGem then
            buy()
            sleep(100)
            warp(world,doorFarm)
            sleep(100)
            bot:autoCollect(3, true)
            sleep(100)
            botInfo("Farming")
            sleep(100)
        end
    end
end

function harvest(world)
    botInfo("Harvesting Trees")
    sleep(100)
    countWorld(world)
    sleep(100)
    for _,tile in ipairs(bot:getTiles()) do
        if tile.fg == seedId then
            if bot:canHarvest(tile.x,tile.y) and bot:hasAccessToTile(tile.x, tile.y) then
                bot:findPath(tile.x,tile.y)
                sleep(100)
                while bot:getTile(tile.x,tile.y).fg == seedId and bot:canHarvest(tile.x,tile.y) and bot:hasAccessToTile(tile.x, tile.y) do
                    punch(0,0)
                    sleep(delayHarvest)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            end
        end
        if findItem(blockId) >= 190 or findItem(seedId) >= 190 then
            pnb(world)
            sleep(100)
            plant(world)
            sleep(100)
        end
    end
    countWorld(world)
    sleep(100)
    pnb(world)
    sleep(100)
    plant2(world)
    sleep(100)
    if bot:getLocal().gems >= minimumGem then
        buy()
        sleep(100)
    end
end

function collect2(range)
    for i,obj in pairs(bot:getObjects()) do
        local objx = round(obj.pos.x/32)
        local objy = math.floor(obj.pos.y/32)
        if obj.count < 190 then
            if bot:isInside(objx, objy, range) then
                bot:collectObject(obj.uid)
            end
        end
    end
end

function harvest2(world)
    botInfo("Harvesting Trees")
    sleep(100)
    countWorld(world)
    sleep(100)
    for _,tile in ipairs(bot:getTiles()) do
        if tile.fg == seedId then
            if bot:canHarvest(tile.x,tile.y) and bot:hasAccessToTile(tile.x, tile.y) then
                bot:findPath(tile.x,tile.y)
                sleep(100)
                bot:autoCollect(2, false)
                while bot:getTile(tile.x,tile.y).fg == seedId and bot:canHarvest(tile.x,tile.y) and bot:hasAccessToTile(tile.x, tile.y) do
                    punch(0,0)
                    sleep(delayHarvest)
                    collect2(3)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            end
            if findItem(blockId) >= 190 then
                while findItem(blockId) >= 190 and tileDrop1(tile.x + 1,tile.y, findItem(blockId)) do
                    bot:sendPacket("action|drop\n|itemID|"..blockId, 2)
                    sleep(1250)
                    bot:sendPacket("action|dialog_return\ndialog_name|drop_item\nitemID|"..blockId.."|\ncount|"..findItem(blockId), 2)
                    sleep(1250)
                    reconnect(world,doorFarm,tile.x,tile.y)
                end
            end
        end
        if findItem(seedId) >= 190 then
           storeSeed(world)
           sleep(100)
        end
        if bot:getLocal().level >= minimumLevel then
            bot:autoCollect(3, true)
            sleep(100)
            break
        end
    end
    if bot:getLocal().gems >= minimumGem then
        buy()
        sleep(100)
    end
end

function wear(id)
    pkt = {}
    pkt.type = 10
    pkt.int_data = id
    bot:sendPacketRaw(pkt)
end

function takePickaxe()
    if autoPickaxe then
        warp(pickStorage,doorPick)
        sleep(100)
        bot:autoCollect(3, false)
        sleep(100)
        for _,obj in pairs(bot:getObjects()) do
            if obj.id == 98 then
                bot:findPath(round(obj.pos.x / 32)-1,math.floor(obj.pos.y / 32))
                sleep(1000)
                collect(2, 98)
                sleep(1000)
                reconnect(pickStorage,doorPick)
            end
            if findItem(98) > 1 then
                while findItem(98) > 1 and tileDrop1(round(obj.pos.x / 32),math.floor(obj.pos.y / 32), findItem(98)-1) do
                    bot:sendPacket("action|drop\n|itemID|98", 2)
                    sleep(1250)
                    bot:sendPacket("action|dialog_return\ndialog_name|drop_item\nitemID|98|\ncount|"..findItem(98)-1, 2)
                    sleep(1250)
                    reconnect(pickStorage,doorPick)
                end
            end
            if findItem(98) == 1 then
                break
            end
        end
        wear(98)
        sleep(2000)
    end
end

takePickaxe()
while true do
    leveledUp = false
    for index,world in pairs(worlds) do
        sleep(100)
        warp(world,doorFarm)
        sleep(100)
        bot:autoCollect(3, true)
        sleep(100)
        bl(world)
        sleep(100)
        countWorld(world)
        sleep(100)
        botInfo("Starting "..world)
        sleep(100)
        tt = os.time()

        local hasBlocks = scanBlock() > 0
        local isAboveMinLevel = bot:getLocal().level >= minimumLevel
        
        if hasBlocks and isAboveMinLevel then
            plant3(world)
            sleep(100)
            while scanBlock() > 0 do
                pnb2(world)
                sleep(100)
                if findItem(seedId) >= 100 then
                    storeSeed(world)
                    sleep(100)
                end
            end
        elseif not hasBlocks and isAboveMinLevel then
            harvest(world)
            sleep(100)
        elseif not isAboveMinLevel then
            harvest2(world)
            sleep(100)
            if isAboveMinLevel then
                leveledUp = true
            end
        end
        if leveledUp then
            break
        end

        tt = os.time() - tt
        botInfo("Finished "..world)
        sleep(100)
        if start < stop then
            start = start + 1
        else
            if restartTimer then
                waktu = {}
                tree = {}
            end
            start = 1
        end
    end
    if not looping and not leveledUp and not rangeFarming then
        botInfo("Finished All World, Removing Bot!")
        sleep(100)
        bot:remove()
        break
    end
end
